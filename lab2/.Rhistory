}
print(llnormal(x = x1, mu = 2, sigma2 = 1))
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x1[(x1 - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
print(llnormal(x = x1, mu = 2, sigma2 = 1))
x1 <- rgamma(n = 10, shape = 4, scale = 1)
x2 <- rgamma(n = 100, shape = 4, scale = 1)
tendraws <- c()
hundreddraws <- c()
steps <- c()
i = 0.01
while(i <= 10) {
tendraws <- c(tendraws, llgamma(x1, alpha = i, beta = 1))
hundreddraws <- c(hundreddraws, llgamma(x2, alpha = i, beta = 1))
steps <- c(steps, i)
i <- i + 0.01
}
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x1[(x1 - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
print(llnormal(x = x1, mu = 2, sigma2 = 1))
x1 <- rnorm(n = 1000, mean = 2, sd = 1)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x1[(x1 - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
print(llnormal(x = x1, mu = 2, sigma2 = 1))
x1 <- rnorm(n = 100, mean = 2, sd = 1)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x1[(x1 - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
print(llnormal(x = x1, mu = 2, sigma2 = 1))
x1 <- rnorm(n = 100, mean = 2, sd = 1)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x1[(x1 - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
print(llnormal(x = x1, mu = 2, sigma2 = 1))
x1 <- rnorm(n = 100, mean = 2, sd = 1)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x1[(x1 - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
print(llnormal(x = x1, mu = 2, sigma2 = 1))
set.seed(4711)
x1 <- rnorm(n = 100, mean = 2, sd = 1)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x1[(x1 - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
print(llnormal(x = x1, mu = 2, sigma2 = 1))
set.seed(4711)
x1 <- rnorm(n = 100, mean = 2, sd = 1)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x1[(x1 - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
set.seed(4711)
x1 <- rnorm(n = 100, mean = 2, sd = 1)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x1[(x1 - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
llnormal(x = x1, mu = 2, sigma2 = 1)
x1 <- rgamma(n = 10, shape = 4, scale = 1)
x2 <- rgamma(n = 100, shape = 4, scale = 1)
llgamma <- function(x, alpha, beta) {
return(length(x) * (alpha * log(beta) - lgamma(alpha)) + (alpha -1) * sum(log(x)) - beta * sum(x))
}
set.seed(4711)
tendraws <- c()
hundreddraws <- c()
steps <- c()
i = 0.01
while(i <= 3) {
tendraws <- c(tendraws, llgamma(x1, alpha = 4, beta = i))
hundreddraws <- c(hundreddraws, llgamma(x2, alpha = 4, beta = i))
steps <- c(steps, i)
i <- i + 0.01
}
# plot for ten draws
plot(steps, tendraws)
# plot for hundred draws
plot(steps, hundreddraws)
# Undersöker och returnerar vilket betavärde som loglikelyhoodfunktionen får sitt maxvärde på
findMaxIndex <- function(vect) {
i <- NULL
currentMax <- -Inf
x <- 1
while (x < length(vect)) {
if (vect[x] > currentMax) {
currentMax <- vect[x]
i <- x
}
x <- x + 1
}
return(i/100)
}
findMaxIndex(tendraws)
findMaxIndex(hundreddraws)
tendraws <- c()
hundreddraws <- c()
steps <- c()
i = 0.01
while(i <= 10) {
tendraws <- c(tendraws, llgamma(x1, alpha = i, beta = 1))
hundreddraws <- c(hundreddraws, llgamma(x2, alpha = i, beta = 1))
steps <- c(steps, i)
i <- i + 0.01
}
# plot for ten draws
plot(steps, tendraws)
# plot for hundred draws
plot(steps, hundreddraws)
# Undersöker och returnerar vilket alphavärde som loglikelyhoodfunktionen får sitt maxvärde på
findMaxIndex <- function(vect) {
i <- NULL
currentMax <- -999999
x <- 1
while (x < length(vect)) {
if (vect[x] > currentMax) {
currentMax <- vect[x]
i <- x
}
x <- x + 1
}
return(i/100)
}
findMaxIndex(tendraws)
findMaxIndex(hundreddraws)
set.seed(4711)
x1 <- rnorm(n = 100, mean = 2, sd = 1)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x1[(x1 - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
llnormal(x = x1, mu = 2, sigma2 = 1) #Fråga om okej
x1 <- rgamma(n = 10, shape = 4, scale = 1)
x2 <- rgamma(n = 100, shape = 4, scale = 1)
set.seed(4711)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x1[(x1 - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
llnormal(x = x1, mu = 2, sigma2 = 1) #Fråga om okej
xsum
set.seed(4711)
x1 <- rnorm(n = 100, mean = 2, sd = 1)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x1[(x1 - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
llnormal(x = x1, mu = 2, sigma2 = 1) #Fråga om okej
xsum
x1 <- rgamma(n = 10, shape = 4, scale = 1)
x2 <- rgamma(n = 100, shape = 4, scale = 1)
set.seed(4711)
x3 <- rnorm(n = 100, mean = 2, sd = 1)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x[(x - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
llnormal(x = x3, mu = 2, sigma2 = 1) #Fråga om okej
set.seed(4711)
x3 <- rnorm(n = 100, mean = 2, sd = 1)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x[(x - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
llnormal(x = x1, mu = 2, sigma2 = 1) #Fråga om okej
set.seed(4711)
x3 <- rnorm(n = 100, mean = 2, sd = 1)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x[(x - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
llnormal(x = x3, mu = 2, sigma2 = 1) #Fråga om okej
# Undersöker och returnerar vilket alphavärde som loglikelyhoodfunktionen får sitt maxvärde på
findMaxIndex <- function(vect) {
i <- NULL
currentMax <- -Inf
x <- 1
while (x < length(vect)) {
if (vect[x] > currentMax) {
currentMax <- vect[x]
i <- x
}
x <- x + 1
}
return(i/100)
}
findMaxIndex(tendraws)
findMaxIndex(hundreddraws)
# Undersöker och returnerar vilket alphavärde som loglikelyhoodfunktionen får sitt maxvärde på
findMaxIndex <- function(vect) {
i <- NULL
currentMax <- -Inf
x <- 1
while (x < length(vect)) {
if (vect[x] > currentMax) {
currentMax <- vect[x]
i <- x
}
x <- x + 1
}
return(i/100)
}
findMaxIndex(tendraws)
findMaxIndex(hundreddraws)
llnormal <- function(x, mu, sigma2) {
xsum <- sum(x[(x - mu)**2])
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
llnormal(x = x1, mu = 2, sigma2 = 1) #Fråga om okej
x
mu
mu = 2
(x - mu)
(x - mu)**2
sum((x - mu)**2)
llnormal <- function(x, mu, sigma2) {
xsum <- sum((x - mu)**2)
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
llnormal(x = x1, mu = 2, sigma2 = 1) #Fråga om okej
x1
set.seed(4711)
x1 <- rgamma(n = 10, shape = 4, scale = 1)
x2 <- rgamma(n = 100, shape = 4, scale = 1)
x1
llnormal <- function(x, mu, sigma2) {
xsum <- sum((x - mu)**2)
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
llnormal(x = x1, mu = 2, sigma2 = 1) #Fråga om okej
tendraws <- c()
hundreddraws <- c()
steps <- c()
i = 0.01
while(i <= 10) {
tendraws <- c(tendraws, llnormal(x1, mu = 2, sigma2 = 1))
hundreddraws <- c(hundreddraws, llnormal(x2, mu = 2, sigma2 = 1))
steps <- c(steps, i)
i <- i + 0.01
}
# plot for ten draws
plot(steps, tendraws)
# plot for hundred draws
plot(steps, hundreddraws)
# plot for ten draws
plot(steps, tendraws)
# plot for hundred draws
plot(steps, hundreddraws)
# plot for ten draws
plot(steps, tendraws)
tendraws <- c()
hundreddraws <- c()
steps <- c()
i = 0.01
while(i <= 3) {
tendraws <- c(tendraws, llgamma(x1, alpha = 4, beta = i))
hundreddraws <- c(hundreddraws, llgamma(x2, alpha = 4, beta = i))
steps <- c(steps, i)
i <- i + 0.01
}
# plot for ten draws
plot(steps, tendraws)
# plot for hundred draws
plot(steps, hundreddraws)
tendraws <- c()
hundreddraws <- c()
steps <- c()
i = 0.01
while(i <= 10) {
tendraws <- c(tendraws, llnormal(x1, mu = i, sigma2 = 1))
hundreddraws <- c(hundreddraws, llnormal(x2, mu = i, sigma2 = 1))
steps <- c(steps, i)
i <- i + 0.01
}
# plot for ten draws
plot(steps, tendraws)
# plot for hundred draws
plot(steps, hundreddraws)
# plot for ten draws
plot(steps, tendraws)
mu_max
mu_tendraws
mu_max <- mu_tendraws[findMaxIndex(mu_tendraws)]
alpha_max <- alpha_tendraws[findMaxIndex(alpha_tendraws)]
beta_max <- beta_tendraws[findMaxIndex(beta_tendraws)]
dgamma(x1, )
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
set.seed(4711)
x1 <- rgamma(n = 10, shape = 4, scale = 1)
x2 <- rgamma(n = 100, shape = 4, scale = 1)
# Chunk 3
llgamma <- function(x, alpha, beta) {
return(length(x) * (alpha * log(beta) - lgamma(alpha)) + (alpha -1) * sum(log(x)) - beta * sum(x))
}
# Chunk 4
beta_tendraws <- c()
beta_hundreddraws <- c()
steps <- c()
i = 0.01
while(i <= 3) {
tendraws <- c(tendraws, llgamma(x1, alpha = 4, beta = i))
hundreddraws <- c(hundreddraws, llgamma(x2, alpha = 4, beta = i))
steps <- c(steps, i)
i <- i + 0.01
}
# Chunk 5
# plot for ten draws
plot(steps, tendraws)
# Chunk 6
# plot for hundred draws
plot(steps, hundreddraws)
# Chunk 7
# Undersöker och returnerar vilket betavärde som loglikelyhoodfunktionen får sitt maxvärde på
findMaxIndex <- function(vect) {
i <- NULL
currentMax <- -Inf
x <- 1
while (x < length(vect)) {
if (vect[x] > currentMax) {
currentMax <- vect[x]
i <- x
}
x <- x + 1
}
return(i/100)
}
findMaxIndex(tendraws)
findMaxIndex(hundreddraws)
# Chunk 8
alpha_tendraws <- c()
alpha_hundreddraws <- c()
steps <- c()
i = 0.01
while(i <= 10) {
tendraws <- c(tendraws, llgamma(x1, alpha = i, beta = 1))
hundreddraws <- c(hundreddraws, llgamma(x2, alpha = i, beta = 1))
steps <- c(steps, i)
i <- i + 0.01
}
# Chunk 9
# plot for ten draws
plot(steps, tendraws)
# Chunk 10
# plot for hundred draws
plot(steps, hundreddraws)
# Chunk 11
# Undersöker och returnerar vilket alphavärde som loglikelyhoodfunktionen får sitt maxvärde på
findMaxIndex <- function(vect) {
i <- NULL
currentMax <- -Inf
x <- 1
while (x < length(vect)) {
if (vect[x] > currentMax) {
currentMax <- vect[x]
i <- x
}
x <- x + 1
}
return(i/100)
}
findMaxIndex(tendraws)
findMaxIndex(hundreddraws)
# Chunk 12
# Chunk 13
llnormal <- function(x, mu, sigma2) {
xsum <- sum((x - mu)**2)
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
llnormal(x = x1, mu = 2, sigma2 = 1) #Fråga om okej
# Chunk 14
mu_tendraws <- c()
mu_hundreddraws <- c()
steps <- c()
i = 0.01
while(i <= 10) {
tendraws <- c(tendraws, llnormal(x1, mu = i, sigma2 = 1))
hundreddraws <- c(hundreddraws, llnormal(x2, mu = i, sigma2 = 1))
steps <- c(steps, i)
i <- i + 0.01
}
# Chunk 15
# plot for ten draws
plot(steps, tendraws)
# Chunk 16
# plot for hundred draws
plot(steps, hundreddraws)
mu_max
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
set.seed(4711)
x1 <- rgamma(n = 10, shape = 4, scale = 1)
x2 <- rgamma(n = 100, shape = 4, scale = 1)
# Chunk 3
llgamma <- function(x, alpha, beta) {
return(length(x) * (alpha * log(beta) - lgamma(alpha)) + (alpha -1) * sum(log(x)) - beta * sum(x))
}
# Chunk 4
beta_tendraws <- c()
beta_hundreddraws <- c()
steps <- c()
i = 0.01
while(i <= 3) {
tendraws <- c(tendraws, llgamma(x1, alpha = 4, beta = i))
hundreddraws <- c(hundreddraws, llgamma(x2, alpha = 4, beta = i))
steps <- c(steps, i)
i <- i + 0.01
}
# Chunk 5
# plot for ten draws
plot(steps, tendraws)
# Chunk 6
# plot for hundred draws
plot(steps, hundreddraws)
# Chunk 7
# Undersöker och returnerar vilket betavärde som loglikelyhoodfunktionen får sitt maxvärde på
findMaxIndex <- function(vect) {
i <- NULL
currentMax <- -Inf
x <- 1
while (x < length(vect)) {
if (vect[x] > currentMax) {
currentMax <- vect[x]
i <- x
}
x <- x + 1
}
return(i/100)
}
findMaxIndex(tendraws)
findMaxIndex(hundreddraws)
# Chunk 8
alpha_tendraws <- c()
alpha_hundreddraws <- c()
steps <- c()
i = 0.01
while(i <= 10) {
tendraws <- c(tendraws, llgamma(x1, alpha = i, beta = 1))
hundreddraws <- c(hundreddraws, llgamma(x2, alpha = i, beta = 1))
steps <- c(steps, i)
i <- i + 0.01
}
# Chunk 9
# plot for ten draws
plot(steps, tendraws)
# Chunk 10
# plot for hundred draws
plot(steps, hundreddraws)
# Chunk 11
# Undersöker och returnerar vilket alphavärde som loglikelyhoodfunktionen får sitt maxvärde på
findMaxIndex <- function(vect) {
i <- NULL
currentMax <- -Inf
x <- 1
while (x < length(vect)) {
if (vect[x] > currentMax) {
currentMax <- vect[x]
i <- x
}
x <- x + 1
}
return(i/100)
}
findMaxIndex(tendraws)
findMaxIndex(hundreddraws)
# Chunk 12
# Chunk 13
llnormal <- function(x, mu, sigma2) {
xsum <- sum((x - mu)**2)
return(-length(x)/2*log(2*pi) - length(x)/2 * log(sigma2) - 1/(2 * sigma2) * xsum)
}
llnormal(x = x1, mu = 2, sigma2 = 1) #Fråga om okej
# Chunk 14
mu_tendraws <- c()
mu_hundreddraws <- c()
steps <- c()
i = 0.01
while(i <= 10) {
tendraws <- c(tendraws, llnormal(x1, mu = i, sigma2 = 1))
hundreddraws <- c(hundreddraws, llnormal(x2, mu = i, sigma2 = 1))
steps <- c(steps, i)
i <- i + 0.01
}
# Chunk 15
# plot for ten draws
plot(steps, tendraws)
# Chunk 16
# plot for hundred draws
plot(steps, hundreddraws)
mu_max <- mu_tendraws[findMaxIndex(mu_tendraws)]
alpha_max <- alpha_tendraws[findMaxIndex(alpha_tendraws)]
beta_max <- beta_tendraws[findMaxIndex(beta_tendraws)]
dgamma(x1, )
mu_max
alpha_max
beta_max
mu_max <- mu_tendraws[findMaxIndex(mu_tendraws)]
alpha_max <- alpha_tendraws[findMaxIndex(alpha_tendraws)]
beta_max <- findMaxIndex(beta_tendraws)
dgamma(x1, )
beta_max
